import { getSession } from 'next-auth/react';
import { NextApiRequest, NextApiResponse } from 'next';
import prisma from '../../../lib/prisma';
import { Booking } from '@prisma/client'; // Importing types generated by Prisma

interface StatsResponse {
  totalClasses: number;
  classesThisMonth: number;
  attendanceRate: number;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse<StatsResponse | { error: string }>) {
  const session = await getSession({ req });

  if (!session) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const userEmail = session.user?.email;

  try {
    if (req.method === 'GET') {
      const bookings: Booking[] = await prisma.booking.findMany({
        where: { user: { id: session.user.id } }, // Changed userId to user relation
        select: { date: true },
      });

      const totalClasses: number = bookings.length;
      const classesThisMonth: number = bookings.filter((booking: Booking) => {
        const bookingDate = booking.date ? new Date(booking.date) : null; // Added null check
        if (!bookingDate) return false;
        const now = new Date();
        return (
          bookingDate.getMonth() === now.getMonth() &&
          bookingDate.getFullYear() === now.getFullYear()
        );
      }).length;

      const attendanceRate: number = Math.round((totalClasses / (totalClasses + 5)) * 100); // Example calculation

      return res.status(200).json({ totalClasses, classesThisMonth, attendanceRate });
    }

    res.setHeader('Allow', ['GET']);
    return res.status(405).json({ error: `Method ${req.method} not allowed` });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}